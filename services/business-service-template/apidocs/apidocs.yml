swagger: '2.0'
info:
    description: >-
        This is a sample microservice application for Project Zen. Here we have taken the examples
        of managing your contacts.
    version: 1.0.0
    title: Contacts (Template Microservice)
host: 'localhost'
basePath: /api/v1
tags:
    - name: contacts
      description: Managing your Contacts
      externalDocs:
          description: Find out more
          url: 'http://dev.daikinlab.com/api_doc/public/index.html'
    - name: customers
      description: Get Customer With Contact Counts
      externalDocs:
          description: Find out more
          url: 'http://dev.daikinlab.com/api_doc/public/index.html'

schemes:
    - http
    - https
paths:
    /contacts:
        post:
            tags:
                - contacts
            summary: Add a new contact
            description: ''
            operationId: addContacts
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - in: body
                  name: body
                  description: Contact object that needs to be added
                  required: true
                  schema:
                      $ref: '#/definitions/Contacts'
            responses:
                '201':
                    description: Created Successfully
                    schema:
                        $ref: '#/definitions/ContactCreationResponse'
                '400':
                    description: Bad Request
        get:
            tags:
                - contacts
            summary: Get all contacts
            description: ''
            operationId: getAllContacts
            consumes:
                - text/html
            parameters:
                - in: query
                  name: customerId
                  description: CustomerId
                  type: string
                  required: false
                - in: query
                  name: rank
                  description: Rank
                  required: false
                  type: integer
                - in: query
                  name: orderBy
                  description: The order in which to return the result, ex., name DESC
                  type: string
                  required: false
                - in: query
                  name: page
                  description: Page to show
                  type: integer
                  required: false
                - in: query
                  name: rows
                  description: Rows per page
                  required: false
                  type: integer
            produces:
                - application/json
            responses:
                '200':
                    description: Successful Retrieval
                    schema:
                        $ref: '#/definitions/GetAllContactResponse'
    '/contacts/{id}':
        get:
            tags:
                - contacts
            summary: Find contact by id
            description: Returns a single contact
            operationId: getContactByID
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: id of the contact
                  required: true
                  type: string
            responses:
                '200':
                    description: Successful retrieval
                    schema:
                        $ref: '#/definitions/Contacts'
                '401':
                    description: 'Unauthorized (INVALID_JWT_TOKEN)'
                '404':
                    description: Contact not found
        put:
            tags:
                - contacts
            summary: Update contact by id
            description: Updates a single contact
            operationId: updateContact
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: id of the contact
                  required: true
                  type: string
                - in: body
                  name: body
                  description: Contact object that needs to be added
                  required: true
                  schema:
                      $ref: '#/definitions/Contacts'
            responses:
                '200':
                    description: Successful update
                    schema:
                        $ref: '#/definitions/Contacts'
                '401':
                    description: 'Unauthorized (INVALID_JWT_TOKEN)'
                '404':
                    description: Contact not found
        delete:
            tags:
                - contacts
            summary: Delete contact by id
            description: Deletes a single contact
            operationId: deleteContactByID
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: id of the contact
                  required: true
                  type: string
            responses:
                '200':
                    description: Successful retrieval
                    schema:
                        $ref: '#/definitions/Contacts'
                '401':
                    description: 'Unauthorized (INVALID_JWT_TOKEN)'
                '404':
                    description: Contact not found
    /customers:
        get:
            tags:
                - customers
            summary: Get all Customers with Contact Count
            description: ''
            operationId: getAllCustomers
            consumes:
                - text/html
            parameters:
                - in: query
                  name: page
                  description: Page to show
                  type: integer
                  required: false
                - in: query
                  name: rows
                  description: Rows per page
                  required: false
                  type: integer
            produces:
                - application/json
            responses:
                '200':
                    description: Successful Retrieval
                    schema:
                        $ref: '#/definitions/GetAllCustomerResponse'
    /customers/{id}:
        get:
            tags:
                - customers
            summary: Find contact by id
            description: Returns a single customer
            operationId: getCustomerByID
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: id of the customer
                  required: true
                  type: string
            responses:
                '200':
                    description: Successful retrieval
                    schema:
                        $ref: '#/definitions/Customers'
                '401':
                    description: 'Unauthorized (INVALID_JWT_TOKEN)'
                '404':
                    description: Customer not found

    /customercontacts/{id}:
        get:
            tags:
                - customer_contacts
            summary: Find contacts for specified customer id
            description: Returns all contacts of this customer
            operationId: getCustomerContactsByID
            produces:
                - application/json
            parameters:
                - name: id
                  in: path
                  description: id of the customer
                  required: true
                  type: string
            responses:
                '200':
                    description: Successful retrieval
                    schema:
                        $ref: '#/definitions/CustomerWithAllContacts'
                '401':
                    description: 'Unauthorized (INVALID_JWT_TOKEN)'
                '404':
                    description: Customer not found
    /upgrades:
        post:
            tags:
                - rankings
            summary: Upgrade the ranks of all the contacts, unless anybody has rank above 5 in which case all changes will be rolled back
            description: ''
            operationId: upgradeRanks
            consumes:
                - application/json
            produces:
                - application/json
            parameters:
            responses:
                '201':
                    description: Upgraded Successfully
                    schema:
                        $ref: '#/definitions/GetAllContactResponse'
                '400':
                    description: Bad Request

securityDefinitions:
    ApiKeyAuth:
        type: apiKey
        name: authorization
        in: header
security:
    - ApiKeyAuth: []

definitions:
    Contacts:
        type: object
        required:
            - name
            - email
            - rank
            - customerId
        properties:
            name:
                type: string
                example: Mary Lamb
            email:
                type: string
                example: mary.lamb@gmail.com
            phone:
                type: string
                example: '6503458753'
            rank:
                type: integer
                example: 1
            customerId:
                type: integer
                example: 1
    ContactCreationResponse:
        type: object
        properties:
            id:
                type: string
                example: 5d8d29f50a14246543a37398
    GetAllContactResponse:
        type: array
        items:
            $ref: '#/definitions/Contacts'

        example:
            - name: Mary Lamb
              email: mary.lamb@gmail.com
              phone: '6503458753'
              rank: 2
              customerId: 1
            - name: Snow White
              email: snow.white@gmail.com
              phone: '5103421356'
              rank: 4
              customerId: 2
    Customers:
        type: object
        required:
            - id
            - name
            - website
            - established
            - contactCount
        properties:
            id:
                type: integer
                example: 1
            name:
                type: string
                example: Apple
            website:
                type: string
                example: www.apple.com
            established:
                type: integer
                example: 1976
            contactCount:
                type: integer
                example: 4
    GetAllCustomerResponse:
        type: array
        items:
            $ref: '#/definitions/Customers'

    CustomerWithAllContacts:
        type: object
        properties:
            id:
                type: integer
                example: 1
            name:
                type: string
                example: Apple
            website:
                type: string
                example: www.apple.com
            established:
                type: integer
                example: 1976
            contactCount:
                type: integer
                example: 4
            contact:
                type: array
                items:
                    $ref: '#/definitions/Contacts'
